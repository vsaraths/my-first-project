import random
from collections import Counter

class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls):
        # If more balls are requested than available, return all and leave contents empty
        if num_balls >= len(self.contents):
            drawn_balls = self.contents.copy()  # Return a copy of the contents
            self.contents.clear()  # Empty the contents
            return drawn_balls
        
        drawn_balls = random.sample(self.contents, num_balls)  # Randomly draw specified number of balls
        for ball in drawn_balls:
            self.contents.remove(ball)  # Remove drawn balls from the hat
        return drawn_balls

def check_drawn_balls(drawn_balls, expected_balls):
    drawn_counts = Counter(drawn_balls)
    # Check if drawn counts meet or exceed the expected counts
    return all(drawn_counts[color] >= count for color, count in expected_balls.items())

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    success_count = 0

    for _ in range(num_experiments):
        # Create a copy of the hat for each experiment
        hat_copy = Hat(**Counter(hat.contents))
        drawn_balls = hat_copy.draw(num_balls_drawn)
        
        if check_drawn_balls(drawn_balls, expected_balls):
            success_count += 1

    probability = success_count / num_experiments
    return probability

# Example usage:
if __name__ == "__main__":
    hat = Hat(blue=5, red=4, green=2)
    probability = experiment(hat=hat,
                             expected_balls={'red': 1, 'green': 2},
                             num_balls_drawn=4,
                             num_experiments=2000)
    print(f"Estimated Probability: {probability:.4f}")  # Output formatted to four decimal places


